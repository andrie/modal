---
title: "Thames River Conditions"
format: 
  html:
    css: custom.css
---

## Sunrise and sunset times

:::{#sun-times-table .autospinner}
:::

```{=html}

<script>

async function request(url) {
    const response = await fetch(url);
    const data = await response.json();
    return data;
}

async function updateSunTimes() {
    const data = await request("https://andrie--thames-sunrise.modal.run/");
    const container = document.getElementById('sun-times-table');
    container.innerHTML = '';
    // Transpose the data
    console.log(data);
    const tdata = [
        data.map(obj => obj.event),
        data.map(obj => obj.time)
    ];
    new gridjs.Grid({
        // columns: ['Event', 'Time'],
        data: tdata
    }).render(container);
 }
</script>
```


## River conditions

::: {#river-closures-table .autospinner}
:::

```{=html}
<script>
async function fetchRiverConditionsData() {
    const currentTime = Date.now();
    const storedData = localStorage.getItem('data-river-closures');
    const storedTime = localStorage.getItem('time-river-closures');

    // const data;

    if (storedData && storedTime && currentTime < new Date(storedTime)) {
        // If the stored data and time exist and the data is less than 15 minutes old, return the stored data
        data = JSON.parse(storedData);
    } else {
        // Otherwise, fetch the data from the API
        data = await request('https://andrie--thames-conditions.modal.run/');

        // filter data on rows where `To` == 'Molesey Lock'

        // Store the data and the current time in local storage
        localStorage.setItem('data-river-closures', JSON.stringify(data));
        const updateTime = currentTime + 15 * 60 * 1000;
        localStorage.setItem('time-river-closures', updateTime.toString());
    }
    const sub = data.filter(row => row.to === 'Molesey Lock');
    return sub;
}

async function updateRiverConditions() {
    const data = await fetchRiverConditionsData();
    const container = document.getElementById('river-closures-table');
    container.innerHTML = '';
    // remove date columns
    data.forEach(row => row.reach = row.from + ' to ' + row.to);   
    data.forEach(row => {delete row.date; delete row.from; delete row.to});
    
    new gridjs.Grid({
        columns: ['reach', 'condition'],
        data: data
    }).render(container);
}
</script>

```

## Lock level

::: {#lock-level-table .autospinner}
:::

```{=html}
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>

<script>
async function updateLockLevel() {
    const data = await request('https://andrie--thames-water-level.modal.run/?station=Sunbury');
    const container = document.getElementById('lock-level-table');
    container.innerHTML = '';

    // new gridjs.Grid({
    //     // columns: ['Lock', 'Level'],
    //     data: data
    // }).render(container);
    pdata = data.map(row => {
        return {
            x: row.dateTime,
            y: row.value
        }
    });
    const pData = [{
        x: data.map(row => row.dateTime),
        y: data.map(row => row.value),
        mode: 'lines+markers',
        marker: {
            size: 4  // Make the markers smaller
        },
        line: {
            shape: 'spline'  // Make the lines curved
        }
        
    }];
    Plotly.newPlot(container, pData,
        {
            title: 'Lock level at Sunbury',
            yaxis: { title: 'Level (mASD)' }
        }
    );
}

</script>
```



```{=html}
<link href="https://unpkg.com/gridjs/dist/theme/mermaid.min.css" rel="stylesheet" />
<script src="https://unpkg.com/gridjs/dist/gridjs.umd.js"></script>
<script src="https://unpkg.com/suncalc"></script>
<script>

addSpinnerId = function(id) {
    const container = document.getElementById(id);
    const spinner = document.createElement('div');
    spinner.className = 'spinner';
    container.appendChild(spinner);
}
addSpinner = function(el) {
    const spinner = document.createElement('div');
    spinner.className = 'spinner';
    el.appendChild(spinner);
}
window.onload = async function() {
    Array.from(
        document.getElementsByClassName('autospinner')
    ).forEach(function(el) {
        addSpinner(el);
    });
    await Promise.all([
        updateSunTimes(),
        updateRiverConditions(),
        updateLockLevel(),
    ]);
 }
</script>
```

